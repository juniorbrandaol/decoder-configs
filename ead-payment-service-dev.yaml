server:
  port: 8089
  servlet:
    context-path: '/ead-payment/'

spring:
  application:
    name: ead-payment-service
  datasource:
    url: jdbc:postgresql://localhost:5432/ead-payment
    username: postgres
    password: 1224
  cloud:
    openfeign:
      client:
        config:
          default:
            connectTimeout: 5000
            readTimeout: 5000
            loggerLevel: basic
    #config: false

  jpa:
    hibernate:
      ddl-auto: update
      dialect: org.hibernate.dialect.PostgreSQLDialect
      jdbc:lob: non_contextual_creation: true
    show_sql: true
    properties:
      hibernate:
       format_sql: true
    open-in-view: false
    generate-ddl: true
  output:
    ansi:
      enabled: Always  
  rabbitmq:
    addresses: amqps://opsazktl:pjGwggbKPiZQ8eOzUD2LXjjjM7yU2Y-B@moose.rmq.cloudamqp.com/opsazktl


#colorir mensagens no terminal windows
  output:
    ansi:
      enabled: ALWAYS

logging:
  level:
    com.ead: TRACE
    root: INFO
    org.springframework.web: DEBUG
    web: DEBUG
    org.hibernate: INFO

ead:
  serviceRegistry:
    username: serviceregistry
    password: 'ead1224service'
  auth:
    jwtSecret: t7w!z%C*F-JaNdRgUkXp2s5v8x/A?D(G+KbPeShVmYq3t6w9z$B&E)H@McQfTjWn
    jwtExpirationMs: 14400000
  api:
    url:
      course: 'http://ead-course-service/ead-course'
  broker:
    exchange:
      userEventExchange: ead.userevent
      paymentCommandExchange: ead.paymentcommand
    queue:
      userEventQueue:
        name: ead.userEvent.ms.payment
      paymentCommandQueue:
        name: ead.paymentcommand.ms.payment
    key:
      paymentCommandKey: ms.payment
  stripe:
    secretKey: '{cipher}4da19baf4a82edcc3818f9d059fc725a02c7e00fc4ccc7ba5d7f62e0e83447216a6db7a0554323e225763baf60e8e21e2f7dd68c1545c1210c0ebbc7e9f403e8807d1ec4d4c84d543db38e8f5ec3f7721d09f54d236a729f0049560ee196420fbd1836dcfa4712785a7d4e7d4c639b7d873fb1398a90a181bddb1937c8ad8a7df1bd40519bc07db9f153062f120c1195'
    

#Configuração do resilliebce4j a nivel de método. criamos as instancias(name) ex:curcuitbreakerInstance, retryIntance
#O retry é uma das possibilidades de implementação de um broker. temos o circuitbreaker tambem
resilience4j:
  circuitbreaker:
    instances:
      curcuitbreakerInstance:
        slidingWindowSize: 30 #para cada 30 tentativas
        permittedNumberOfCallsInHalfOpenState: 2
        slidingWindowType: TIME_BASED
        minimumNumberOfCalls: 2 # após duas chamadas, ele levará em conta a porcentagem de falhas
        waitDurationInOpenState: 30s # período de tempo que o circuto fica em um certo estado, depois muda
        failureRateThreshold: 80  #porcentagem aceita de falhas
  retry:
    instances:
      retryIntance:
        maxAttempts: 3
        waitDuration: 5s


