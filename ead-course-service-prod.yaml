server:
  port: ${PORT}
  servlet:
    context-path: '/ead-course/'


spring:
  application:
    name: ead-course-service
  datasource:
    url: ${JDBC_DATABASE_URL} 
    username: ${JDBC_DATABASE_USERNAME}
    password: ${JDBC_DATABASE_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: update
      dialect: org.hibernate.dialect.PostgreSQLDialect
      jdbc:
        lob.non_contextual_creation: true
    properties:
      hibernate: 
       format_sql: true
       show_sql: true
       open-in-view: false
       generate-ddl: true
  rabbitmq:
    addresses: ${CLOUDAMQP_URL}     

  
ead:
  api:
    url:
      authuser: 'http://ead-authuser-service/ead-authuser/'



#Configuração do resilliebce4j a nivel de método. criamos as instancias(name) ex:curcuitbreakerInstance, retryIntance
#O retry é uma das possibilidades de implementação de um broker. temos o circuitbreaker tambem
resilience4j:
  circuitbreaker:
    instances:
      curcuitbreakerInstance:
        slidingWindowSize: 30 #para cada 30 tentativas
        permittedNumberOfCallsInHalfOpenState: 2
        slidingWindowType: TIME_BASED
        minimumNumberOfCalls: 2 # após duas chamadas, ele levará em conta a porcentagem de falhas
        waitDurationInOpenState: 30s # período de tempo que o circuto fica em um certo estado, depois muda
        failureRateThreshold: 80  #porcentagem aceita de falhas
  retry:
    instances:
      retryIntance:
        maxAttempts: 3
        waitDuration: 5s



